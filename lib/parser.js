module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Start": parse_Start,
        "Lines": parse_Lines,
        "ProgLine": parse_ProgLine,
        "Line": parse_Line,
        "Label": parse_Label,
        "Inst": parse_Inst,
        "SpecialInst": parse_SpecialInst,
        "PageArg": parse_PageArg,
        "DbExpr": parse_DbExpr,
        "InstArgs": parse_InstArgs,
        "MacroArgs": parse_MacroArgs,
        "MacroArg": parse_MacroArg,
        "Expr": parse_Expr,
        "ExprLogic": parse_ExprLogic,
        "ExprCmp": parse_ExprCmp,
        "ExprAdd": parse_ExprAdd,
        "ExprMul": parse_ExprMul,
        "ExprShift": parse_ExprShift,
        "ExprPrimary": parse_ExprPrimary,
        "Number": parse_Number,
        "String": parse_String,
        "ExprChar": parse_ExprChar,
        "Identifier": parse_Identifier,
        "Whitespace": parse_Whitespace,
        "LineTerminator": parse_LineTerminator,
        "EOF": parse_EOF,
        "_": parse__,
        "__": parse___,
        "Comment": parse_Comment,
        "SingleLineComment": parse_SingleLineComment,
        "SingleLineComment2": parse_SingleLineComment2,
        "MultiLineComment": parse_MultiLineComment,
        "CommentNoLineTerminator": parse_CommentNoLineTerminator,
        "MultiLineCommentNoLineTerminator": parse_MultiLineCommentNoLineTerminator
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_Start() {
        var cacheKey = "Start@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Lines();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_LineTerminator();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_LineTerminator();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l) { return l; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Lines() {
        var cacheKey = "Lines@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_ProgLine();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse___();
            if (result3 !== null) {
              result5 = parse_LineTerminator();
              if (result5 === null) {
                if (input.charCodeAt(pos.offset) === 92) {
                  result5 = "\\";
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
              }
              if (result5 !== null) {
                result4 = [];
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_LineTerminator();
                  if (result5 === null) {
                    if (input.charCodeAt(pos.offset) === 92) {
                      result5 = "\\";
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\\\\"");
                      }
                    }
                  }
                }
              } else {
                result4 = null;
              }
              if (result4 !== null) {
                result5 = parse___();
                if (result5 !== null) {
                  result6 = parse_ProgLine();
                  result6 = result6 !== null ? result6 : "";
                  if (result6 !== null) {
                    result3 = [result3, result4, result5, result6];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse___();
              if (result3 !== null) {
                result5 = parse_LineTerminator();
                if (result5 === null) {
                  if (input.charCodeAt(pos.offset) === 92) {
                    result5 = "\\";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\\\"");
                    }
                  }
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_LineTerminator();
                    if (result5 === null) {
                      if (input.charCodeAt(pos.offset) === 92) {
                        result5 = "\\";
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\\\\"");
                        }
                      }
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse___();
                  if (result5 !== null) {
                    result6 = parse_ProgLine();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
            tail = _.map(tail, function(i) { return i[3]; });
            return _.flatten([head, tail]);
          })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ProgLine() {
        var cacheKey = "ProgLine@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_Line();
        if (result0 !== null) {
          result0 = (function(offset, line, column, l) {
            if(astif.length && !_.isUndefined(_.last(astif).elseBody)) { _.last(astif).elseBody.push(l); return []; }
            if(astif.length)  { _.last(astif).thenBody.push(l); return []; }
            if(repeat.length) { _.last(repeat).body.push(l); return []; }
            if(macro)         { macro.body.push(l); return []; }
            return l;
          })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Line() {
        var cacheKey = "Line@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Identifier();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos.offset, 3).toLowerCase() === "equ") {
              result2 = input.substr(pos.offset, 3);
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"equ\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_Expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, e) { return {equ:{label:l, value:e}, line:line}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_Label();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_Inst();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, l, i) { return [{label:l, line:line}, i] })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_Label();
            if (result0 !== null) {
              result0 = (function(offset, line, column, l) { return {label:l, line:line}; })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_Inst();
              if (result0 !== null) {
                result0 = (function(offset, line, column, i) { return _.isEmpty(i) ? i :_.extend(i, {line:line}); })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Label() {
        var cacheKey = "Label@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Identifier();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l) { return l; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Inst() {
        var cacheKey = "Inst@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_SpecialInst();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "@@") {
            result0 = "@@";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"@@\"");
            }
          }
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_Identifier();
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result3 = parse_InstArgs();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, m, asm, args) { return {asm:{inst:asm, args:args, execmacro:_.isEmpty(m)}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SpecialInst() {
        var cacheKey = "SpecialInst@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3).toLowerCase() === "org") {
          result0 = input.substr(pos.offset, 3);
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"org\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_Expr();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return {org:n}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 3).toLowerCase() === "map") {
            result0 = input.substr(pos.offset, 3);
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"map\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_Expr();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, n) { return {map:n}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2).toLowerCase() === "ds") {
              result0 = input.substr(pos.offset, 2);
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"ds\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 4).toLowerCase() === "defs") {
                result0 = input.substr(pos.offset, 4);
                advance(pos, 4);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"defs\"");
                }
              }
            }
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_Expr();
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 44) {
                      result4 = ",";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse__();
                      if (result5 !== null) {
                        result6 = parse_Expr();
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, n, v) { return {ds:{len:n,value:v}}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 2).toLowerCase() === "ds") {
                result0 = input.substr(pos.offset, 2);
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ds\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 4).toLowerCase() === "defs") {
                  result0 = input.substr(pos.offset, 4);
                  advance(pos, 4);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"defs\"");
                  }
                }
              }
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  result2 = parse_Expr();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, n) { return {ds:{len:n,value:{num:0}}}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2).toLowerCase() === "dw") {
                  result0 = input.substr(pos.offset, 2);
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"dw\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 4).toLowerCase() === "defw") {
                    result0 = input.substr(pos.offset, 4);
                    advance(pos, 4);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"defw\"");
                    }
                  }
                }
                if (result0 !== null) {
                  result1 = parse__();
                  if (result1 !== null) {
                    result2 = parse_Expr();
                    if (result2 !== null) {
                      result3 = [];
                      pos2 = clone(pos);
                      result4 = parse__();
                      if (result4 !== null) {
                        if (input.charCodeAt(pos.offset) === 44) {
                          result5 = ",";
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result5 !== null) {
                          result6 = parse__();
                          if (result6 !== null) {
                            result7 = parse_Expr();
                            if (result7 !== null) {
                              result4 = [result4, result5, result6, result7];
                            } else {
                              result4 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result4 = null;
                        pos = clone(pos2);
                      }
                      while (result4 !== null) {
                        result3.push(result4);
                        pos2 = clone(pos);
                        result4 = parse__();
                        if (result4 !== null) {
                          if (input.charCodeAt(pos.offset) === 44) {
                            result5 = ",";
                            advance(pos, 1);
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                          if (result5 !== null) {
                            result6 = parse__();
                            if (result6 !== null) {
                              result7 = parse_Expr();
                              if (result7 !== null) {
                                result4 = [result4, result5, result6, result7];
                              } else {
                                result4 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result4 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                      }
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, head, tail) { return {dw:[head].concat(_.map(tail, function(i) { return i[3]; }))}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.substr(pos.offset, 2).toLowerCase() === "db") {
                    result0 = input.substr(pos.offset, 2);
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"db\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 4).toLowerCase() === "defb") {
                      result0 = input.substr(pos.offset, 4);
                      advance(pos, 4);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"defb\"");
                      }
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse__();
                    if (result1 !== null) {
                      result2 = parse_DbExpr();
                      if (result2 !== null) {
                        result3 = [];
                        pos2 = clone(pos);
                        result4 = parse__();
                        if (result4 !== null) {
                          if (input.charCodeAt(pos.offset) === 44) {
                            result5 = ",";
                            advance(pos, 1);
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                          if (result5 !== null) {
                            result6 = parse__();
                            if (result6 !== null) {
                              result7 = parse_DbExpr();
                              if (result7 !== null) {
                                result4 = [result4, result5, result6, result7];
                              } else {
                                result4 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result4 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                        while (result4 !== null) {
                          result3.push(result4);
                          pos2 = clone(pos);
                          result4 = parse__();
                          if (result4 !== null) {
                            if (input.charCodeAt(pos.offset) === 44) {
                              result5 = ",";
                              advance(pos, 1);
                            } else {
                              result5 = null;
                              if (reportFailures === 0) {
                                matchFailed("\",\"");
                              }
                            }
                            if (result5 !== null) {
                              result6 = parse__();
                              if (result6 !== null) {
                                result7 = parse_DbExpr();
                                if (result7 !== null) {
                                  result4 = [result4, result5, result6, result7];
                                } else {
                                  result4 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result4 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result4 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        }
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, head, tail) { return {db:[head].concat(_.map(tail, function(i) { return i[3]; }))}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.substr(pos.offset, 6).toLowerCase() === "module") {
                      result0 = input.substr(pos.offset, 6);
                      advance(pos, 6);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"module\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse__();
                      if (result1 !== null) {
                        result2 = parse_Identifier();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, i) { return {module:i}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      if (input.substr(pos.offset, 9).toLowerCase() === "endmodule") {
                        result0 = input.substr(pos.offset, 9);
                        advance(pos, 9);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"endmodule\"");
                        }
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column) { return {endmodule:true}; })(pos0.offset, pos0.line, pos0.column);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        if (input.substr(pos.offset, 7).toLowerCase() === "include") {
                          result0 = input.substr(pos.offset, 7);
                          advance(pos, 7);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"include\"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse__();
                          if (result1 !== null) {
                            result2 = parse_String();
                            if (result2 !== null) {
                              result0 = [result0, result1, result2];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column, s) { return {include:s}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          if (input.substr(pos.offset, 6).toLowerCase() === "incbin") {
                            result0 = input.substr(pos.offset, 6);
                            advance(pos, 6);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"incbin\"");
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse__();
                            if (result1 !== null) {
                              result2 = parse_String();
                              if (result2 !== null) {
                                result3 = parse__();
                                if (result3 !== null) {
                                  if (input.charCodeAt(pos.offset) === 44) {
                                    result4 = ",";
                                    advance(pos, 1);
                                  } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\",\"");
                                    }
                                  }
                                  if (result4 !== null) {
                                    result5 = parse__();
                                    if (result5 !== null) {
                                      result6 = parse_Expr();
                                      if (result6 !== null) {
                                        result7 = parse__();
                                        if (result7 !== null) {
                                          if (input.charCodeAt(pos.offset) === 44) {
                                            result8 = ",";
                                            advance(pos, 1);
                                          } else {
                                            result8 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\",\"");
                                            }
                                          }
                                          if (result8 !== null) {
                                            result9 = parse__();
                                            if (result9 !== null) {
                                              result10 = parse_Expr();
                                              if (result10 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, s, k, l) { return {incbin:{file:s, skip:k, len:l}}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[10]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            if (input.substr(pos.offset, 6).toLowerCase() === "incbin") {
                              result0 = input.substr(pos.offset, 6);
                              advance(pos, 6);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"incbin\"");
                              }
                            }
                            if (result0 !== null) {
                              result1 = parse__();
                              if (result1 !== null) {
                                result2 = parse_String();
                                if (result2 !== null) {
                                  result3 = parse__();
                                  if (result3 !== null) {
                                    if (input.charCodeAt(pos.offset) === 44) {
                                      result4 = ",";
                                      advance(pos, 1);
                                    } else {
                                      result4 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\",\"");
                                      }
                                    }
                                    if (result4 !== null) {
                                      result5 = parse__();
                                      if (result5 !== null) {
                                        result6 = parse_Expr();
                                        if (result6 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, line, column, s, k) { return {incbin:{file:s, skip:k}}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6]);
                            }
                            if (result0 === null) {
                              pos = clone(pos0);
                            }
                            if (result0 === null) {
                              pos0 = clone(pos);
                              pos1 = clone(pos);
                              if (input.substr(pos.offset, 6).toLowerCase() === "incbin") {
                                result0 = input.substr(pos.offset, 6);
                                advance(pos, 6);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"incbin\"");
                                }
                              }
                              if (result0 !== null) {
                                result1 = parse__();
                                if (result1 !== null) {
                                  result2 = parse_String();
                                  if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, line, column, s) { return {incbin:{file:s}}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                              }
                              if (result0 === null) {
                                pos = clone(pos0);
                              }
                              if (result0 === null) {
                                pos0 = clone(pos);
                                pos1 = clone(pos);
                                if (input.substr(pos.offset, 5).toLowerCase() === "macro") {
                                  result0 = input.substr(pos.offset, 5);
                                  advance(pos, 5);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"macro\"");
                                  }
                                }
                                if (result0 !== null) {
                                  result1 = parse__();
                                  if (result1 !== null) {
                                    result2 = parse_Identifier();
                                    if (result2 !== null) {
                                      result3 = parse__();
                                      if (result3 !== null) {
                                        result4 = parse_MacroArgs();
                                        result4 = result4 !== null ? result4 : "";
                                        if (result4 !== null) {
                                          result0 = [result0, result1, result2, result3, result4];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, line, column, i, a) { if(macro) { throw new Error('Forbidden macro declaration'); } macro = {id:i, args:a, body:[]}; return {}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
                                }
                                if (result0 === null) {
                                  pos = clone(pos0);
                                }
                                if (result0 === null) {
                                  pos0 = clone(pos);
                                  if (input.substr(pos.offset, 8).toLowerCase() === "endmacro") {
                                    result0 = input.substr(pos.offset, 8);
                                    advance(pos, 8);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"endmacro\"");
                                    }
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, line, column) { var m = macro; macro = null; return {macro:m}; })(pos0.offset, pos0.line, pos0.column);
                                  }
                                  if (result0 === null) {
                                    pos = clone(pos0);
                                  }
                                  if (result0 === null) {
                                    pos0 = clone(pos);
                                    pos1 = clone(pos);
                                    if (input.substr(pos.offset, 6).toLowerCase() === "repeat") {
                                      result0 = input.substr(pos.offset, 6);
                                      advance(pos, 6);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"repeat\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 4).toLowerCase() === "rept") {
                                        result0 = input.substr(pos.offset, 4);
                                        advance(pos, 4);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"rept\"");
                                        }
                                      }
                                    }
                                    if (result0 !== null) {
                                      result1 = parse__();
                                      if (result1 !== null) {
                                        result2 = parse_Expr();
                                        if (result2 !== null) {
                                          result0 = [result0, result1, result2];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, line, column, n) { repeat.push({count:n, body:[]}); return {}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                    }
                                    if (result0 === null) {
                                      pos = clone(pos0);
                                    }
                                    if (result0 === null) {
                                      pos0 = clone(pos);
                                      if (input.substr(pos.offset, 9).toLowerCase() === "endrepeat") {
                                        result0 = input.substr(pos.offset, 9);
                                        advance(pos, 9);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"endrepeat\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 4).toLowerCase() === "endr") {
                                          result0 = input.substr(pos.offset, 4);
                                          advance(pos, 4);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"endr\"");
                                          }
                                        }
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, line, column) { var r = repeat.pop(); return {repeat:r}; })(pos0.offset, pos0.line, pos0.column);
                                      }
                                      if (result0 === null) {
                                        pos = clone(pos0);
                                      }
                                      if (result0 === null) {
                                        pos0 = clone(pos);
                                        pos1 = clone(pos);
                                        if (input.substr(pos.offset, 5).toLowerCase() === "ifdef") {
                                          result0 = input.substr(pos.offset, 5);
                                          advance(pos, 5);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"ifdef\"");
                                          }
                                        }
                                        if (result0 !== null) {
                                          result1 = parse__();
                                          if (result1 !== null) {
                                            result2 = parse_Identifier();
                                            if (result2 !== null) {
                                              result0 = [result0, result1, result2];
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, line, column, i) { astif.push({defined:i, thenBody:[]}); return {}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                        }
                                        if (result0 === null) {
                                          pos = clone(pos0);
                                        }
                                        if (result0 === null) {
                                          pos0 = clone(pos);
                                          pos1 = clone(pos);
                                          if (input.substr(pos.offset, 6).toLowerCase() === "ifndef") {
                                            result0 = input.substr(pos.offset, 6);
                                            advance(pos, 6);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"ifndef\"");
                                            }
                                          }
                                          if (result0 !== null) {
                                            result1 = parse__();
                                            if (result1 !== null) {
                                              result2 = parse_Identifier();
                                              if (result2 !== null) {
                                                result0 = [result0, result1, result2];
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, line, column, i) { astif.push({undefined:i, thenBody:[]}); return {}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                          }
                                          if (result0 === null) {
                                            pos = clone(pos0);
                                          }
                                          if (result0 === null) {
                                            pos0 = clone(pos);
                                            pos1 = clone(pos);
                                            if (input.substr(pos.offset, 2).toLowerCase() === "if") {
                                              result0 = input.substr(pos.offset, 2);
                                              advance(pos, 2);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"if\"");
                                              }
                                            }
                                            if (result0 !== null) {
                                              result1 = parse__();
                                              if (result1 !== null) {
                                                result2 = parse_Expr();
                                                if (result2 !== null) {
                                                  result0 = [result0, result1, result2];
                                                } else {
                                                  result0 = null;
                                                  pos = clone(pos1);
                                                }
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                            if (result0 !== null) {
                                              result0 = (function(offset, line, column, e) { astif.push({expr:e, thenBody:[]}); return {}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                            }
                                            if (result0 === null) {
                                              pos = clone(pos0);
                                            }
                                            if (result0 === null) {
                                              pos0 = clone(pos);
                                              if (input.substr(pos.offset, 4).toLowerCase() === "else") {
                                                result0 = input.substr(pos.offset, 4);
                                                advance(pos, 4);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"else\"");
                                                }
                                              }
                                              if (result0 !== null) {
                                                result0 = (function(offset, line, column) { _.last(astif).elseBody = []; return {}; })(pos0.offset, pos0.line, pos0.column);
                                              }
                                              if (result0 === null) {
                                                pos = clone(pos0);
                                              }
                                              if (result0 === null) {
                                                pos0 = clone(pos);
                                                if (input.substr(pos.offset, 5).toLowerCase() === "endif") {
                                                  result0 = input.substr(pos.offset, 5);
                                                  advance(pos, 5);
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"endif\"");
                                                  }
                                                }
                                                if (result0 !== null) {
                                                  result0 = (function(offset, line, column) { var i = astif.pop(); return {if:i}; })(pos0.offset, pos0.line, pos0.column);
                                                }
                                                if (result0 === null) {
                                                  pos = clone(pos0);
                                                }
                                                if (result0 === null) {
                                                  pos0 = clone(pos);
                                                  pos1 = clone(pos);
                                                  if (input.substr(pos.offset, 6).toLowerCase() === "rotate") {
                                                    result0 = input.substr(pos.offset, 6);
                                                    advance(pos, 6);
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"rotate\"");
                                                    }
                                                  }
                                                  if (result0 !== null) {
                                                    result1 = parse__();
                                                    if (result1 !== null) {
                                                      result2 = parse_Expr();
                                                      if (result2 !== null) {
                                                        result0 = [result0, result1, result2];
                                                      } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = clone(pos1);
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                  }
                                                  if (result0 !== null) {
                                                    result0 = (function(offset, line, column, n) { return {rotate:n}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                                  }
                                                  if (result0 === null) {
                                                    pos = clone(pos0);
                                                  }
                                                  if (result0 === null) {
                                                    pos0 = clone(pos);
                                                    pos1 = clone(pos);
                                                    if (input.substr(pos.offset, 7).toLowerCase() === "defpage") {
                                                      result0 = input.substr(pos.offset, 7);
                                                      advance(pos, 7);
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"defpage\"");
                                                      }
                                                    }
                                                    if (result0 !== null) {
                                                      result1 = parse__();
                                                      if (result1 !== null) {
                                                        result2 = parse_PageArg();
                                                        if (result2 !== null) {
                                                          result3 = parse__();
                                                          if (result3 !== null) {
                                                            if (input.charCodeAt(pos.offset) === 44) {
                                                              result4 = ",";
                                                              advance(pos, 1);
                                                            } else {
                                                              result4 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\",\"");
                                                              }
                                                            }
                                                            if (result4 !== null) {
                                                              result5 = parse__();
                                                              if (result5 !== null) {
                                                                result6 = parse_Expr();
                                                                if (result6 !== null) {
                                                                  result7 = parse__();
                                                                  if (result7 !== null) {
                                                                    if (input.charCodeAt(pos.offset) === 44) {
                                                                      result8 = ",";
                                                                      advance(pos, 1);
                                                                    } else {
                                                                      result8 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("\",\"");
                                                                      }
                                                                    }
                                                                    if (result8 !== null) {
                                                                      result9 = parse__();
                                                                      if (result9 !== null) {
                                                                        result10 = parse_Expr();
                                                                        if (result10 !== null) {
                                                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = clone(pos1);
                                                                        }
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = clone(pos1);
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = clone(pos1);
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = clone(pos1);
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = clone(pos1);
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = clone(pos1);
                                                    }
                                                    if (result0 !== null) {
                                                      result0 = (function(offset, line, column, p, o, s) { return {defpage:{index:p, origin:o, size:s}}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[10]);
                                                    }
                                                    if (result0 === null) {
                                                      pos = clone(pos0);
                                                    }
                                                    if (result0 === null) {
                                                      pos0 = clone(pos);
                                                      pos1 = clone(pos);
                                                      if (input.substr(pos.offset, 4).toLowerCase() === "page") {
                                                        result0 = input.substr(pos.offset, 4);
                                                        advance(pos, 4);
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"page\"");
                                                        }
                                                      }
                                                      if (result0 !== null) {
                                                        result1 = parse__();
                                                        if (result1 !== null) {
                                                          result2 = parse_PageArg();
                                                          if (result2 !== null) {
                                                            result0 = [result0, result1, result2];
                                                          } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = clone(pos1);
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                      }
                                                      if (result0 !== null) {
                                                        result0 = (function(offset, line, column, p) { return {page:p}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                                      }
                                                      if (result0 === null) {
                                                        pos = clone(pos0);
                                                      }
                                                      if (result0 === null) {
                                                        pos0 = clone(pos);
                                                        pos1 = clone(pos);
                                                        if (input.substr(pos.offset, 4).toLowerCase() === "echo") {
                                                          result0 = input.substr(pos.offset, 4);
                                                          advance(pos, 4);
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"echo\"");
                                                          }
                                                        }
                                                        if (result0 !== null) {
                                                          result1 = parse__();
                                                          if (result1 !== null) {
                                                            result2 = parse_Expr();
                                                            if (result2 !== null) {
                                                              result3 = [];
                                                              pos2 = clone(pos);
                                                              result4 = parse__();
                                                              if (result4 !== null) {
                                                                if (input.charCodeAt(pos.offset) === 44) {
                                                                  result5 = ",";
                                                                  advance(pos, 1);
                                                                } else {
                                                                  result5 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\",\"");
                                                                  }
                                                                }
                                                                if (result5 !== null) {
                                                                  result6 = parse__();
                                                                  if (result6 !== null) {
                                                                    result7 = parse_Expr();
                                                                    if (result7 !== null) {
                                                                      result4 = [result4, result5, result6, result7];
                                                                    } else {
                                                                      result4 = null;
                                                                      pos = clone(pos2);
                                                                    }
                                                                  } else {
                                                                    result4 = null;
                                                                    pos = clone(pos2);
                                                                  }
                                                                } else {
                                                                  result4 = null;
                                                                  pos = clone(pos2);
                                                                }
                                                              } else {
                                                                result4 = null;
                                                                pos = clone(pos2);
                                                              }
                                                              while (result4 !== null) {
                                                                result3.push(result4);
                                                                pos2 = clone(pos);
                                                                result4 = parse__();
                                                                if (result4 !== null) {
                                                                  if (input.charCodeAt(pos.offset) === 44) {
                                                                    result5 = ",";
                                                                    advance(pos, 1);
                                                                  } else {
                                                                    result5 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("\",\"");
                                                                    }
                                                                  }
                                                                  if (result5 !== null) {
                                                                    result6 = parse__();
                                                                    if (result6 !== null) {
                                                                      result7 = parse_Expr();
                                                                      if (result7 !== null) {
                                                                        result4 = [result4, result5, result6, result7];
                                                                      } else {
                                                                        result4 = null;
                                                                        pos = clone(pos2);
                                                                      }
                                                                    } else {
                                                                      result4 = null;
                                                                      pos = clone(pos2);
                                                                    }
                                                                  } else {
                                                                    result4 = null;
                                                                    pos = clone(pos2);
                                                                  }
                                                                } else {
                                                                  result4 = null;
                                                                  pos = clone(pos2);
                                                                }
                                                              }
                                                              if (result3 !== null) {
                                                                result0 = [result0, result1, result2, result3];
                                                              } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = clone(pos1);
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = clone(pos1);
                                                        }
                                                        if (result0 !== null) {
                                                          result0 = (function(offset, line, column, head, tail) { return {echo:[head].concat(_.map(tail, function(i) { return i[3]; }))}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
                                                        }
                                                        if (result0 === null) {
                                                          pos = clone(pos0);
                                                        }
                                                        if (result0 === null) {
                                                          pos0 = clone(pos);
                                                          pos1 = clone(pos);
                                                          if (input.substr(pos.offset, 5).toLowerCase() === "error") {
                                                            result0 = input.substr(pos.offset, 5);
                                                            advance(pos, 5);
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"error\"");
                                                            }
                                                          }
                                                          if (result0 !== null) {
                                                            result1 = parse__();
                                                            if (result1 !== null) {
                                                              result2 = parse_Expr();
                                                              if (result2 !== null) {
                                                                result0 = [result0, result1, result2];
                                                              } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = clone(pos1);
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                          }
                                                          if (result0 !== null) {
                                                            result0 = (function(offset, line, column, msg) { return {error:msg}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                                                          }
                                                          if (result0 === null) {
                                                            pos = clone(pos0);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PageArg() {
        var cacheKey = "PageArg@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Expr();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "..") {
              result2 = "..";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"..\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_Expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, e) { return {start:s, end:e}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_Expr();
          if (result0 !== null) {
            result0 = (function(offset, line, column, e) { return e })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_DbExpr() {
        var cacheKey = "DbExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        result0 = parse_Expr();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_String();
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return {str:s}; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_InstArgs() {
        var cacheKey = "InstArgs@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Expr();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 44) {
              result3 = ",";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_Expr();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 44) {
                result3 = ",";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_Expr();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) { return [head].concat(_.map(tail, function(i) { return i[3]; })); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_MacroArgs() {
        var cacheKey = "MacroArgs@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_MacroArg();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 44) {
              result3 = ",";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_MacroArg();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 44) {
                result3 = ",";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_MacroArg();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) { return [head].concat(_.map(tail, function(i) { return i[3]; })); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_MacroArg() {
        var cacheKey = "MacroArg@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 49) {
          result0 = "1";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"1\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "..") {
              result2 = "..";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"..\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 42) {
                  result4 = "*";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse___();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return {rest:true}; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_Identifier();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 58) {
                result2 = ":";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_Expr();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, i, e) { return {id:i, default:e}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_Identifier();
            if (result0 !== null) {
              result0 = (function(offset, line, column, i) { return {id:i}; })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Expr() {
        var cacheKey = "Expr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_ExprLogic();
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { return e; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_ExprChar();
          if (result0 !== null) {
            result0 = (function(offset, line, column, e) { return {chr:e}; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_String();
            if (result0 !== null) {
              result0 = (function(offset, line, column, e) { return {str:e}; })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprLogic() {
        var cacheKey = "ExprLogic@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ExprCmp();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 94) {
              result2 = "^";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"^\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_ExprLogic();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) { return {unary:"^", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_ExprCmp();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 124) {
                result2 = "|";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"|\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_ExprLogic();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, right) { return {unary:"|", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ExprCmp();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 38) {
                  result2 = "&";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"&\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    result4 = parse_ExprLogic();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, left, right) { return {unary:"&", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_ExprCmp();
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprCmp() {
        var cacheKey = "ExprCmp@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ExprAdd();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "==") {
              result2 = "==";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"==\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_ExprAdd();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) { return {eq: {left:left, right:right}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_ExprAdd();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              if (input.substr(pos.offset, 2) === "!=") {
                result2 = "!=";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!=\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_ExprAdd();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, right) { return {neq:{left:left, right:right}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_ExprAdd();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                if (input.substr(pos.offset, 2) === "<=") {
                  result2 = "<=";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<=\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    result4 = parse_ExprAdd();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, left, right) { return {le: {left:left, right:right}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_ExprAdd();
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  if (input.substr(pos.offset, 2) === ">=") {
                    result2 = ">=";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = parse__();
                    if (result3 !== null) {
                      result4 = parse_ExprAdd();
                      if (result4 !== null) {
                        result0 = [result0, result1, result2, result3, result4];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, left, right) { return {ge: {left:left, right:right}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_ExprAdd();
                if (result0 !== null) {
                  result1 = parse__();
                  if (result1 !== null) {
                    if (input.charCodeAt(pos.offset) === 60) {
                      result2 = "<";
                      advance(pos, 1);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"<\"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = parse__();
                      if (result3 !== null) {
                        result4 = parse_ExprAdd();
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, left, right) { return {lt: {left:left, right:right}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = parse_ExprAdd();
                  if (result0 !== null) {
                    result1 = parse__();
                    if (result1 !== null) {
                      if (input.charCodeAt(pos.offset) === 62) {
                        result2 = ">";
                        advance(pos, 1);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\">\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse__();
                        if (result3 !== null) {
                          result4 = parse_ExprAdd();
                          if (result4 !== null) {
                            result0 = [result0, result1, result2, result3, result4];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, left, right) { return {gt: {left:left, right:right}}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    result0 = parse_ExprAdd();
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprAdd() {
        var cacheKey = "ExprAdd@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ExprMul();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            pos2 = clone(pos);
            if (/^[+\-]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[+\\-]");
              }
            }
            if (result3 !== null) {
              result4 = parse_ExprMul();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = clone(pos);
                if (/^[+\-]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[+\\-]");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_ExprMul();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) {
            var n=[left].concat(_.map(right, function(i) {
              if(i[0]==='-') {
               return {neg:i[1]};
              } else {
               return i[1];
              }
            }));
            return {unary:"+", args:n};
          })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_ExprMul();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprMul() {
        var cacheKey = "ExprMul@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ExprShift();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 42) {
              result2 = "*";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_ExprMul();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) { return {unary:"*", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_ExprShift();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 47) {
                result2 = "/";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_ExprMul();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, right) { return {unary:"/", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_ExprShift();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprShift() {
        var cacheKey = "ExprShift@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ExprPrimary();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "<<") {
              result2 = "<<";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"<<\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_ExprShift();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) { return {unary:"<<", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_ExprPrimary();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              if (input.substr(pos.offset, 2) === ">>") {
                result2 = ">>";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\">>\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_ExprShift();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, left, right) { return {unary:">>", args:[left, right]}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_ExprPrimary();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprPrimary() {
        var cacheKey = "ExprPrimary@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 45) {
          result0 = "-";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ExprPrimary();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e) { return {neg:e}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 64) {
            result0 = "@";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_Expr();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, e) { return {arg:e}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 35) {
              result0 = "#";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#\"");
              }
            }
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_Expr();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, e) { return {getMap:e}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_Number();
              if (result0 !== null) {
                result0 = (function(offset, line, column, num) { return {num:num}; })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                result0 = parse_Identifier();
                if (result0 !== null) {
                  result0 = (function(offset, line, column, id) { return {id:id}; })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  if (input.charCodeAt(pos.offset) === 36) {
                    result0 = "$";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"$\"");
                    }
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column) { return {id:'$'}; })(pos0.offset, pos0.line, pos0.column);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 40) {
                      result0 = "(";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_ExprAdd();
                      if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result2 = ")";
                          advance(pos, 1);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, e) { return {paren:e}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = "Number@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 104) {
            result1 = "h";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"h\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) { return parseInt(text.join(""), 16); })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "0x") {
            result0 = "0x";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"0x\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 36) {
              result0 = "$";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"$\"");
              }
            }
          }
          if (result0 !== null) {
            if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-fA-F]");
              }
            }
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9a-fA-F]");
                  }
                }
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, text) { return parseInt(text.join(""), 16); })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "0b") {
              result0 = "0b";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0b\"");
              }
            }
            if (result0 !== null) {
              if (/^[0-1]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-1]");
                }
              }
              if (result2 !== null) {
                result1 = [];
                while (result2 !== null) {
                  result1.push(result2);
                  if (/^[0-1]/.test(input.charAt(pos.offset))) {
                    result2 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-1]");
                    }
                  }
                }
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, text) { return parseInt(text.join(""), 2); })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (/^[0-1]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-1]");
                }
              }
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  if (/^[0-1]/.test(input.charAt(pos.offset))) {
                    result1 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-1]");
                    }
                  }
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                if (input.charCodeAt(pos.offset) === 98) {
                  result1 = "b";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"b\"");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, text) { return parseInt(text.join(""), 2); })(pos0.offset, pos0.line, pos0.column, result0[0]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                      result1 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("[0-9]");
                      }
                    }
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, text) { return parseInt(text.join("")); })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_String() {
        var cacheKey = "String@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 34) {
            result2 = "\"";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) { return _.map(text, function(i) { return i[1]; }).join(""); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExprChar() {
        var cacheKey = "ExprChar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 39) {
            result1 = "'";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            if (input.length > pos.offset) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t) { return t[1]; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Identifier() {
        var cacheKey = "Identifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (/^[a-zA-Z_0-9.]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z_0-9.]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-zA-Z_0-9.]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-zA-Z_0-9.]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, p, s) { return (p||'') + s.join(''); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Whitespace() {
        var cacheKey = "Whitespace@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[\t\x0B\f \xA0\uFEFF]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t\\x0B\\f \\xA0\\uFEFF]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_LineTerminator() {
        var cacheKey = "LineTerminator@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = "EOF@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        reportFailures++;
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = "_@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result0 = [];
        result1 = parse_Whitespace();
        if (result1 === null) {
          result1 = parse_CommentNoLineTerminator();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Whitespace();
          if (result1 === null) {
            result1 = parse_CommentNoLineTerminator();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = "__@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result0 = [];
        result1 = parse_Whitespace();
        if (result1 === null) {
          result1 = parse_Comment();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Whitespace();
          if (result1 === null) {
            result1 = parse_Comment();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = "Comment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_SingleLineComment();
        if (result0 === null) {
          result0 = parse_SingleLineComment2();
          if (result0 === null) {
            result0 = parse_MultiLineComment();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleLineComment() {
        var cacheKey = "SingleLineComment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "//") {
          result0 = "//";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_LineTerminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_LineTerminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleLineComment2() {
        var cacheKey = "SingleLineComment2@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 59) {
          result0 = ";";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_LineTerminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_LineTerminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiLineComment() {
        var cacheKey = "MultiLineComment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CommentNoLineTerminator() {
        var cacheKey = "CommentNoLineTerminator@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_SingleLineComment();
        if (result0 === null) {
          result0 = parse_MultiLineCommentNoLineTerminator();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiLineCommentNoLineTerminator() {
        var cacheKey = "MultiLineCommentNoLineTerminator@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          if (result2 === null) {
            result2 = parse_LineTerminator();
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 === null) {
              result2 = parse_LineTerminator();
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
        var _ = require('underscore');
        var macro = null;
        var repeat = [];
        var astif = [];
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
